#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import signal
import sys

from optparse import OptionParser

import pynotifyd.config
import pynotifyd.errors
import pynotifyd.queue

# The following snippet has to occur before anyone uses the logging module.
HAS_INOTIFY = True
try:
	import pyinotify
except ImportError:
	HAS_INOTIFY = False

def die(message):
	sys.stderr.write(message + "\n")
	sys.exit(1)


def die_exc(exception):
	die("error: %s" % str(exception))


def main():
	config = queue = None
	def_config = "/etc/pynotifyd.conf"
	parser = OptionParser(usage="Usage: %prog [options] <recipent> [message]")
	parser.add_option("-c", "--config", dest="configfile", default=def_config, help="use FILE as configuration file", metavar="FILE")
	parser.add_option("-i", "--stdin", dest="stdin", default=False, action="store_true", help="read message from stdin")
	options, args = parser.parse_args()

	try:
		config = pynotifyd.config.read_config(options.configfile)

		queue = pynotifyd.queue.PersistentQueue(config["general"]["queuedir"], config["general"]["retry"])
	except pynotifyd.errors.PyNotifyDError, err:
		die_exc(err)

	if options.stdin:
		if len(args) != 1:
			die("you need to pass exactly one recipient")
		recipient = args[0]
		message = sys.stdin.read()
	else:
		if len(args) < 2:
			die("recipient and message required")
		recipient = args[0]
		message = " ".join(args[1:])

	if recipient not in config["contacts"]:
		die("unknown recipient %s" % recipient)

	try:
		queue.enqueue(recipient, message)
	except pynotifyd.errors.PyNotifyDError, err:
		die_exc(err)


	if not HAS_INOTIFY:
		pid = queue.getlockowner()
		if pid is not None:
			try:
				os.kill(pid, signal.SIGUSR1)
			except OSError as err:
				die("failed to notify daemon: %s" % err.strerror)

if __name__ == "__main__":
	main()
