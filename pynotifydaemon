#!/usr/bin/env python
# -*- coding: utf-8 -*-

import grp
import inspect
import logging
import logging.handlers
import os
import platform
import pwd
import signal
import sys
import traceback

# The following snippet has to occur before anyone uses the logging module.
HAS_INOTIFY = True
try:
	import pyinotify
except ImportError:
	HAS_INOTIFY = False
else:
	# Now pyinoty has called its log_init and fucked the GLOBAL LOGGER CLASS.
	import logging
	logging.setLoggerClass(logging.Logger)

import pynotifyd
import pynotifyd.config
import pynotifyd.errors
import pynotifyd.notifier
import pynotifyd.providers.base
import pynotifyd.queue
import optparse

HAS_SETPROCTITLE = False
try:
	import setproctitle
	HAS_SETPROCTITLE = True
except ImportError:
	pass

logger = logging.getLogger("pynotifyd.daemon")


def logstderr(message):
	sys.stderr.write(message + "\n")


def die(message):
	logstderr(message)
	sys.exit(1)


def die_exc(exception):
	die("error: %s" % str(exception))


def partial_apply(function, *boundargs, **boundkwargs):
	def wrapped_function(*args, **kwargs):
		newargs = boundargs + args
		newkwargs = boundkwargs.copy()
		boundkwargs.update(kwargs)
		return function(*newargs, **newkwargs)
	wrapped_function.__doc__ = function.__doc__
	return wrapped_function


def daemonize():
	rend, wend = os.pipe()
	rend = os.fdopen(rend, "r")
	wend = os.fdopen(wend, "w")
	os.chdir("/")
	devnull = os.open("/dev/null", os.O_RDWR)
	os.dup2(devnull, 0)
	os.dup2(devnull, 1)
	# Redirect stderr later, so we can use it for die.
	try:
		if os.fork() > 0:
			wend.close()
			data = rend.read()
			if data:
				sys.stderr.write(data)
				sys.exit(1)
			sys.exit(0)
	except OSError, e:
		die("first fork failed with error %e" % e)
	os.setsid()
	try:
		if os.fork() > 0:
			sys.exit(0)
	except OSError, e:
		die("second fork failed with error %e" % e)
	rend.close()
	os.dup2(devnull, 2)
	return wend


def chgid(group):
	if group.isdigit():
		group = int(group)
	else:
		try:
			group = grp.getgrnam(group).gr_gid
		except KeyError:
			die("group %r not found" % group)
	try:
		os.setgid(group)
	except OSError, err:
		die_exc(err)
	if os.getgid() != group:
		die("gid unchanged after setgid()")


def chuid(user):
	if user.isdigit():
		user = int(user)
	else:
		try:
			user = pwd.getpwnam(user).pw_uid
		except KeyError:
			die("user %r not found" % user)
	try:
		os.setuid(user)
	except OSError, err:
		die_exc(err)
	if os.getuid() != user:
		die("uid unchanged after setuid()")


def get_log_address():
	if platform.system() == "Linux":
		log_address = "/dev/log"
	elif platform.system() == "Darwin":
		log_address = "/var/run/syslog"
	else:
		raise RuntimeError("platform.system() %s is not defined" % platform.system())
	return log_address


def syslog_handler(ident):
	sysloghand = logging.handlers.SysLogHandler(address=get_log_address())
	logformat = "%s[%%(process)s]: %%(message)s" % (ident,)
	sysloghand.setFormatter(logging.Formatter(logformat))
	return sysloghand


def main():
	config = directory_watcher = queue = providers = old_stderr = None

	def_config = "/etc/pynotifyd.conf"
	parser = optparse.OptionParser(usage="Usage: %prog [options]")
	parser.add_option("-c", "--config", dest="configfile", default=def_config, help="use FILE as configuration file", metavar="FILE")
	parser.add_option("-f", "--foreground", dest="foreground", default=False, help="do not fork into background", action="store_true")
	parser.add_option("--clearqueue", dest="clearqueue", default=False, help="clear the queue prior to starting up", action="store_true")
	parser.add_option("--debuglibs", default=False, dest="debuglibs", help="include very verbose log message from all libraries employed", action="store_true")
	options, args = parser.parse_args()

	mainlogger = logging.getLogger(None if options.debuglibs else "pynotifyd")
	mainlogger.setLevel(logging.DEBUG)
	if options.foreground:
		mainlogger.addHandler(logging.StreamHandler(sys.stderr))
	else:
		mainlogger.addHandler(syslog_handler("pynotifyd"))

	if args:
		die("unrecognized non-option parameters were passed")

	logger.debug("pynotifyd %s starting using config file %s" % (pynotifyd.__version__, options.configfile))

	try:
		config = pynotifyd.config.read_config(options.configfile)
	except pynotifyd.errors.PyNotifyDError, err:
		die_exc(err)

	if "chgid" in config["general"]:
		chgid(config["general"]["chgid"])
	if "chuid" in config["general"]:
		chuid(config["general"]["chuid"])

	if config["general"]["notify"] == "inotify" and HAS_INOTIFY is False:
		die("inotify specified in [general][notify] but inotify is missing. Install inotify python module or change config")
	elif config["general"]["notify"] == "inotify":
		directory_watcher = pynotifyd.notifier.InotifyDirectoryWatcher
	elif config["general"]["notify"] == "signal":
		directory_watcher = pynotifyd.notifier.SignalDirectoryWatcher
	else:
		die("unknown notify method %r" % config["general"]["notify"])

	if not options.foreground:
		old_stderr = sys.stderr
		sys.stderr = daemonize()

	try:
		queue = pynotifyd.queue.PersistentQueue(config["general"]["queuedir"], config["general"]["retry"])

		providers = {}
		for p_name, section in config["providers"].items():
			if p_name in config["general"]["retry"]:
				try:
					package_name = section["driver"]
					mod_l = __import__("pynotifyd.providers.%s" % package_name, fromlist=[])
					for name, obj in inspect.getmembers(sys.modules["pynotifyd.providers.%s" % package_name]):
						if inspect.isclass(obj) and name.startswith("Provider"):
							logger.debug("Found class %s in module %s for provider name %s" % (name, package_name, p_name))
							providers[p_name] = obj(section)
				except (ImportError, Exception) as msg:
					for line in traceback.format_exc(sys.exc_info()[2]).splitlines():
						logger.warn(line)
					die("cannot use provider %s - check if dependencies are satisfied or remove provider from config. Error: %s" % (p_name, msg))
			else:
				logger.debug("Ignoring unused provider %s which is not used in [general][retry] logic" % p_name)
	except pynotifyd.errors.PyNotifyDError, err:
		die_exc(err)

	if config["general"].get("proctitle") and HAS_SETPROCTITLE:
		setproctitle.setproctitle(config["general"]["proctitle"])

	directory_watcher_handle = directory_watcher(config["general"]["queuedir"])

	try:
		queue.lock()
		if options.clearqueue:
			queue.clear()
	except pynotifyd.errors.PyNotifyDError, err:
		die_exc(err)

	# startup finished: terminate parent
	if not options.foreground:
		sys.stderr.close()
		sys.stderr = old_stderr

	try:
		running = [True]

		def terminate(_, __):
			running[0] = False

		signal.signal(signal.SIGTERM, terminate)
		while running[0]:
			logger.debug("processing next event")
			wait = pynotifyd.queue.process_queue_step(config, queue, providers)
			if wait == 0:
				continue
			if wait is None:
				logger.debug("queue empty, sleeping ")
			else:
				logger.debug("sleeping up to %.1f seconds", wait)
			directory_watcher_handle(wait)
		logger.debug("terminating due to SIGTERM")
	except KeyboardInterrupt:
		logger.debug("pynotifyd stopping due to keyboard interrupt")
	finally:
		for name, provider in providers.items():
			logger.debug("terminating provider %s", name)
			try:
				provider.terminate()
			except Exception, msg:
				logger.error("failed to terminate provider %s with %s: %s", name, msg.__class__.__name__, msg)
		queue.unlock()

if __name__ == '__main__':
	try:
		main()
	except Exception, exc:
		logger.error("pynotifyd crashed with message %s and exception %s", str(exc), exc.__class__.__name__)
		for line in traceback.format_exc(sys.exc_info()[2]).splitlines():
			logger.error(line)
		raise
